{"version":3,"sources":["App.js","action.js","serviceWorker.js","index.js"],"names":["App","state","todo","handleChange","e","setState","target","value","handleSubmit","preventDefault","todoSingle","id","Date","checked","text","props","addTodo","handleDelete","removeTodo","handleChcebox","checkboxTodo","className","onSubmit","this","type","onChange","map","key","onClick","disabled","Component","connect","dispatch","payload","Boolean","window","location","hostname","match","reducer","combineReducers","action","console","log","concat","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAKMA,G,kNACJC,MAAQ,CACNC,KAAM,I,EAGRC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZH,KAAME,EAAEE,OAAOC,S,EAInBC,aAAe,SAACJ,GACdA,EAAEK,iBACF,IAAMC,EAAa,CACjBC,GAAI,IAAIC,KACRC,SAAS,EACTC,KAAM,EAAKb,MAAMC,MAEnB,EAAKa,MAAMC,QAAQN,GACnB,EAAKL,SAAS,CACZH,KAAM,M,EAIVe,aAAe,SAACN,GACd,EAAKI,MAAMG,WAAWP,I,EAGxBQ,cAAgB,SAACR,GACf,EAAKI,MAAMK,aAAaT,I,uDAGhB,IAAD,OACP,OACE,oCACE,wBAAIU,UAAU,WAAd,aACA,0BAAMC,SAAUC,KAAKf,cACnB,2BACEgB,KAAK,OACLC,SAAUF,KAAKpB,aACfI,MAAOgB,KAAKtB,MAAMC,KAClBmB,UAAU,eAEZ,4BAAQA,UAAU,WAAlB,QAEF,yBAAKA,UAAU,cACZE,KAAKR,MAAMb,KAAKwB,KAAI,SAACxB,GACpB,OACE,yBAAKmB,UAAU,QACb,uBAAGM,IAAKzB,EAAKS,GAAIU,UAAU,kBACxBnB,EAAKY,MAER,uBAAGO,UAAU,oBACX,4BACEO,QAAS,kBAAM,EAAKX,aAAaf,EAAKS,KACtCU,UAAU,aACVQ,UAAW3B,EAAKW,SAHlB,UAOA,2BACEW,KAAK,WACLX,QAASX,EAAKW,QACdY,SAAU,kBAAM,EAAKN,cAAcjB,EAAKS,kB,GA/D1CmB,cAyFHC,eAdS,SAAC9B,GACvB,MAAO,CACLC,KAAMD,EAAMC,SAIW,SAAC8B,GAC1B,MAAO,CACLhB,QAAS,SAACd,GAAD,OAAU8B,ECxFA,SAAC9B,GACtB,MAAO,CACLsB,KAAM,WACNS,QAAS/B,GDqFmBc,CAAQd,KACpCgB,WAAY,SAACP,GAAD,OAAQqB,EClFE,SAACrB,GACzB,MAAO,CACLa,KAAM,eACNS,QAAStB,GD+EoBO,CAAWP,KACxCS,aAAc,SAACT,GAAD,OAAQqB,EC5EE,SAACrB,GAC3B,MAAO,CACLa,KAAM,iBACNS,QAAStB,GDyEsBS,CAAaT,QAIjCoB,CAA6C/B,GElFxCkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCUAC,EAAUC,YAAgB,CAC9BtC,KArBkB,WAAyB,IAAxBD,EAAuB,uDAAf,GAAIwC,EAAW,uCAE1C,OADAC,QAAQC,IAAI1C,GACJwC,EAAOjB,MACb,IAAK,WACH,OAAOvB,EAAM2C,OAAOH,EAAOR,SAC7B,IAAK,eACH,OAAOhC,EAAM4C,QAAO,SAAC3C,GAAD,OAAUA,EAAKS,KAAO8B,EAAOR,WACnD,IAAK,iBACH,OAAOhC,EAAMyB,KAAI,SAACxB,GAChB,OAAIA,EAAKS,KAAO8B,EAAOR,SACrB/B,EAAKW,SAAWX,EAAKW,QACdX,GAEFA,KAEX,QACE,OAAOD,MAQP6C,EAAQC,YAAYR,GAC1BS,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAEFI,SAASC,eAAe,SD8FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.d4668996.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo, removeTodo, checkboxTodo } from './action';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todo: '',\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      todo: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const todoSingle = {\n      id: new Date(),\n      checked: false,\n      text: this.state.todo,\n    };\n    this.props.addTodo(todoSingle);\n    this.setState({\n      todo: '',\n    });\n  };\n\n  handleDelete = (id) => {\n    this.props.removeTodo(id);\n  };\n\n  handleChcebox = (id) => {\n    this.props.checkboxTodo(id);\n  };\n\n  render() {\n    return (\n      <>\n        <h1 className=\"heading\">Todo List</h1>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.todo}\n            className=\"input-todo\"\n          />\n          <button className=\"btn-add\">Add</button>\n        </form>\n        <div className=\"todos-list\">\n          {this.props.todo.map((todo) => {\n            return (\n              <div className=\"todo\">\n                <p key={todo.id} className=\"paragraph-todo\">\n                  {todo.text}\n                </p>\n                <p className=\"paragraph-delete\">\n                  <button\n                    onClick={() => this.handleDelete(todo.id)}\n                    className=\"btn-delete\"\n                    disabled={!todo.checked}\n                  >\n                    delete\n                  </button>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.checked}\n                    onChange={() => this.handleChcebox(todo.id)}\n                  />\n                </p>\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todo: state.todo,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (todo) => dispatch(addTodo(todo)),\n    removeTodo: (id) => dispatch(removeTodo(id)),\n    checkboxTodo: (id) => dispatch(checkboxTodo(id)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const addTodo = (todo) => {\n  return {\n    type: 'ADD_TODO',\n    payload: todo,\n  };\n};\n\nexport const removeTodo = (id) => {\n  return {\n    type: 'REMOVE__TODO',\n    payload: id,\n  };\n};\n\nexport const checkboxTodo = (id) => {\n  return {\n    type: 'CHECKBOX__TODO',\n    payload: id,\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst todoReducer = (state = [], action) => {\n  console.log(state);\n  switch (action.type) {\n    case 'ADD_TODO':\n      return state.concat(action.payload);\n    case 'REMOVE__TODO':\n      return state.filter((todo) => todo.id !== action.payload);\n    case 'CHECKBOX__TODO':\n      return state.map((todo) => {\n        if (todo.id === action.payload) {\n          todo.checked = !todo.checked;\n          return todo;\n        }\n        return todo;\n      });\n    default:\n      return state;\n  }\n};\n\nconst reducer = combineReducers({\n  todo: todoReducer,\n});\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}